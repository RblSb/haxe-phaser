package phaser.tweens;

/**
	BaseTweenData is the class that the TweenData and TweenFrameData classes
	extend from. You should not typically instantiate this class directly, but instead
	use it to form your own tween data classes from, should you require it.
	
	Prior to Phaser 3.60 the TweenData was just an object, but was refactored to a class,
	to make it responsible for its own state and updating.
**/
@:native("Phaser.Tweens.BaseTweenData") extern class BaseTweenData {
	function new(tween:Tween, targetIndex:Float, key:String, getEnd:phaser.types.tweens.GetEndCallback, getStart:phaser.types.tweens.GetStartCallback, getActive:Null<phaser.types.tweens.GetActiveCallback>, ease:haxe.Constraints.Function, delay:haxe.Constraints.Function, duration:Float, yoyo:Bool, hold:Float, repeat:Float, repeatDelay:Float, flipX:Bool, flipY:Bool, interpolation:Null<haxe.Constraints.Function>, interpolationData:Null<Array<Float>>);
	/**
		A reference to the Tween that this TweenData instance belongs to.
	**/
	var tween : Tween;
	/**
		The index of the target within the Tween `targets` array.
	**/
	var targetIndex : Float;
	/**
		The duration of the tween in milliseconds, excluding any time required
		for yoyo or repeats.
	**/
	var duration : Float;
	/**
		The total calculated duration, in milliseconds, of this TweenData.
		Factoring in the duration, repeats, delays and yoyos.
	**/
	var totalDuration : Float;
	/**
		The time, in milliseconds, before this tween will start playing.
		
		This value is generated by the `getDelay` function.
	**/
	var delay : Float;
	/**
		This function returns the value to be used for `TweenData.delay`.
	**/
	var getDelay : haxe.Constraints.Function;
	/**
		Will the Tween ease back to its starting values, after reaching the end
		and any `hold` value that may be set?
	**/
	var yoyo : Bool;
	/**
		The time, in milliseconds, before this tween will start a yoyo to repeat.
	**/
	var hold : Float;
	/**
		The number of times this tween will repeat.
		
		The tween will always run once regardless of this value,
		so a repeat value of '1' will play the tween twice: I.e. the original
		play-through and then it repeats that once (1).
		
		If this value is set to -1 this tween will repeat forever.
	**/
	var repeat : Float;
	/**
		The time, in milliseconds, before the repeat will start.
	**/
	var repeatDelay : Float;
	/**
		How many repeats are left to run?
	**/
	var repeatCounter : Float;
	/**
		If `true` this Tween will call `toggleFlipX` on the Tween target
		whenever it yoyo's or repeats. It will only be called if the target
		has a function matching this name, like most Phaser GameObjects do.
	**/
	var flipX : Bool;
	/**
		If `true` this Tween will call `toggleFlipY` on the Tween target
		whenever it yoyo's or repeats. It will only be called if the target
		has a function matching this name, like most Phaser GameObjects do.
	**/
	var flipY : Bool;
	/**
		A value between 0 and 1 holding the progress of this TweenData.
	**/
	var progress : Float;
	/**
		The amount of time, in milliseconds, that has elapsed since this
		TweenData was made active.
	**/
	var elapsed : Float;
	/**
		The state of this TweenData.
	**/
	var state : States;
	/**
		Is this Tween Data currently waiting for a countdown to elapse, or not?
	**/
	var isCountdown : Bool;
	/**
		Returns a reference to the target object belonging to this TweenData.
	**/
	function getTarget():Dynamic;
	/**
		Sets this TweenData's target object property to be the given value.
	**/
	function setTargetValue(?value:Float):Void;
	/**
		Sets this TweenData state to CREATED.
	**/
	function setCreatedState():Void;
	/**
		Sets this TweenData state to DELAY.
	**/
	function setDelayState():Void;
	/**
		Sets this TweenData state to PENDING_RENDER.
	**/
	function setPendingRenderState():Void;
	/**
		Sets this TweenData state to PLAYING_FORWARD.
	**/
	function setPlayingForwardState():Void;
	/**
		Sets this TweenData state to PLAYING_BACKWARD.
	**/
	function setPlayingBackwardState():Void;
	/**
		Sets this TweenData state to HOLD_DELAY.
	**/
	function setHoldState():Void;
	/**
		Sets this TweenData state to REPEAT_DELAY.
	**/
	function setRepeatState():Void;
	/**
		Sets this TweenData state to COMPLETE.
	**/
	function setCompleteState():Void;
	/**
		Returns `true` if this TweenData has a _current_ state of CREATED, otherwise `false`.
	**/
	function isCreated():Bool;
	/**
		Returns `true` if this TweenData has a _current_ state of DELAY, otherwise `false`.
	**/
	function isDelayed():Bool;
	/**
		Returns `true` if this TweenData has a _current_ state of PENDING_RENDER, otherwise `false`.
	**/
	function isPendingRender():Bool;
	/**
		Returns `true` if this TweenData has a _current_ state of PLAYING_FORWARD, otherwise `false`.
	**/
	function isPlayingForward():Bool;
	/**
		Returns `true` if this TweenData has a _current_ state of PLAYING_BACKWARD, otherwise `false`.
	**/
	function isPlayingBackward():Bool;
	/**
		Returns `true` if this TweenData has a _current_ state of HOLD_DELAY, otherwise `false`.
	**/
	function isHolding():Bool;
	/**
		Returns `true` if this TweenData has a _current_ state of REPEAT_DELAY, otherwise `false`.
	**/
	function isRepeating():Bool;
	/**
		Returns `true` if this TweenData has a _current_ state of COMPLETE, otherwise `false`.
	**/
	function isComplete():Bool;
	/**
		Internal method used as part of the playback process that checks if this
		TweenData should yoyo, repeat, or has completed.
	**/
	function setStateFromEnd(diff:Float):Void;
	/**
		Internal method used as part of the playback process that checks if this
		TweenData should repeat or has completed.
	**/
	function setStateFromStart(diff:Float):Void;
	/**
		Internal method that resets this Tween Data entirely, including the progress and elapsed values.
		
		Called automatically by the parent Tween. Should not be called directly.
	**/
	function reset():Void;
	/**
		Internal method that handles repeating or yoyo'ing this TweenData.
		
		Called automatically by `setStateFromStart` and `setStateFromEnd`.
	**/
	function onRepeat(diff:Float, setStart:Bool, isYoyo:Bool):Void;
	/**
		Immediately destroys this TweenData, nulling of all its references.
	**/
	function destroy():Void;
	static var prototype : BaseTweenData;
}